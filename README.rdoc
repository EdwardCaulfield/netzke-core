= netzke-core

Create Ext JS + Rails reusable components (components) with minimum effort.

This is the bare bones of the Netzke framework. Use it to build your own components from scratch. For pre-built components (like panels, grids, forms, trees, applications), see the netzke-basepack (http://github.com/skozlov/netzke-basepack) project.

The idea behind the Netzke framework is that it allows you write reusable client/server code. Create a component, and then embed it straight to your Rails' view, load it dynamically into your Ext-based applications, or use it as a building block for other components. For more info, see the links below.

== Installation
For the latest ("edge") stuff, install as plugin (recommended!):

    rails plugin install git://github.com/skozlov/netzke-core.git -r rails3
    
To generate the migrations for Netzke persistent storage:

    rails g netzke:core

Netzke assumes that your ExtJS library is in public/extjs (which may be a symbolic link):

    ln -s ~/code/sencha/ext-3.2.1 public/extjs

== Usage
Here's how to embed a Netzke component into your Rails view.

1. In your layout, within the "head" tag, use the <tt>netzke_init</tt> helper to include all the necessary JavaScript and styles. 

    <%= netzke_init %>

You can optionally specify an Ext theme to be used:

    <%= netzke_init :ext_theme => 'grey' %>
      
2. In your view use the <tt>netzke</tt> helper to embed a component. Here's an example showing how to embed a <tt>Netzke::GridPanel</tt>:

    <%= netzke :users, :class_name => "Component::GridPanel", :model => "User" %>

== Running tests

netzke-core is bundled with cucumber and RSpec tests. Check its source code to get an idea about the basic functionality of the framework.

Before you can run the tests, you must link your Ext JS library to test/rails_app/public, e.g. (from plugin's root):

    ln -s ~/code/sencha/ext-3.2.1 test/rails_app/public/extjs

For cucumber tests:

    cucumber features
    
RSpec tests:

    rspec spec
    
== Testing playground

The test/rails_app application is also a convenient playground, as it may be run as independent Rails 3 app. After starting it, access any of the lib/netzke test components by using the following url:

    http://localhost:3000/components/<name of the component class>

e.g.:
  
    http://localhost:3000/components/ServerCaller

or, for scoped components:

    http://localhost:3000/components/ScopedComponents::SomeScopedComponent

== Migrating from 0.5.x

There have been a significant amount of changes that made 0.6 version backward-incompatible. Please, refer to CHANGELOG.rdoc for the (hopefully) full list of changes that most certainly made your current application break. Additionally, this wiki page may be of some help, too: http://github.com/skozlov/netzke-core/wiki/Upgrading-from-0.5.x-to-0.6.0

== More info
Netzke website: http://netzke.org

Live-demo with sample code: http://demo.netzke.org

Tutorials: http://blog.writelesscode.com

Twitter: http://twitter.com/skozlov

The netzke-basepack project (pre-built full-featured components): http://github.com/skozlov/netzke-basepack

---

Copyright (c) 2008-2010 Sergei Kozlov, released under the MIT license